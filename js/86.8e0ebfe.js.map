{"version":3,"sources":["webpack:///js/86.8e0ebfe.js","webpack:///./docs/components/form/demo/custom-validation.md"],"names":["webpackJsonp","xVUl","module","exports","markdown","demos"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,SAAA,+0FACAC","file":"js/86.8e0ebfe.js","sourcesContent":["webpackJsonp([86],{\n\n/***/ \"xVUl\":\n/***/ (function(module, exports) {\n\nmodule.exports = {\n markdown: \"<hr>\\n<h2>order: 3\\ntitle:\\nzh-CN: 自定义校验规则\\nen-US: Custom validation rules\\nsubtitle:\\nzh-CN: 自定义校验规则\\nen-US: Custom validation rules.</h2>\\n<pre><code class=\\\"language-js\\\">import {\\n  Form,\\n  Input,\\n  Button,\\n  Select,\\n  Calendar,\\n  Switch,\\n  Checkbox,\\n  Radio,\\n  Message,\\n} from 'dashkit-ui';\\n\\nclass App extends React.Component {\\n  render() {\\n    return (\\n      &lt;Form onSubmit={this.handleSubmit} labelWidth={150}&gt;\\n        &lt;Form.Item\\n          label=&quot;Full Name&quot;\\n          name=&quot;name&quot;\\n          required\\n          rule={{\\n            message: 'Please input your name',\\n            trigger: [`blur`, `change`],\\n            validator: this.handleNameValidator,\\n          }}\\n        &gt;\\n          &lt;Input placeholder=&quot;Full name&quot; /&gt;\\n        &lt;/Form.Item&gt;\\n        &lt;Form.Item\\n          label=&quot;Email&quot;\\n          name=&quot;email&quot;\\n          required\\n          rule={{\\n            message: 'Please input your email',\\n            validator: this.handleEmailValidator,\\n          }}\\n        &gt;\\n          &lt;Input placeholder=&quot;Email&quot; /&gt;\\n        &lt;/Form.Item&gt;\\n        &lt;Form.Item\\n          label=&quot;Confirm Email&quot;\\n          name=&quot;confirmEmail&quot;\\n          required\\n          rule={{\\n            message: 'Please input your email',\\n            trigger: [`focus`, `change`],\\n            validator: this.handleConfirmValidator,\\n          }}\\n        &gt;\\n          &lt;Input placeholder=&quot;Confirm email&quot; /&gt;\\n        &lt;/Form.Item&gt;\\n        &lt;Form.Item&gt;\\n          &lt;Button type=&quot;primary&quot; htmlType=&quot;submit&quot;&gt;\\n            Submit\\n          &lt;/Button&gt;\\n          &lt;Button style={{ marginLeft: 10 }} htmlType=&quot;reset&quot;&gt;\\n            Reset\\n          &lt;/Button&gt;\\n        &lt;/Form.Item&gt;\\n      &lt;/Form&gt;\\n    );\\n  }\\n\\n  handleSubmit = (event, values, errors, forms) =&gt; {\\n    event.preventDefault();\\n\\n    if (!errors) {\\n      console.log(values);\\n      setTimeout(() =&gt; {\\n        Message.success('Success');\\n        forms.reset();\\n      }, 2000);\\n    }\\n  };\\n\\n  handleEmailValidator = (forms, value, callback) =&gt; {\\n    const reg = /^[a-z0-9]+([._\\\\\\\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/;\\n\\n    if (value &amp;&amp; !reg.test(value)) {\\n      callback('Email needs to be in validation email format!');\\n    }\\n  };\\n\\n  handleConfirmValidator = (forms, value, callback) =&gt; {\\n    if (value !== forms.email) {\\n      callback(&quot;Two inputs don't match!&quot;);\\n    }\\n  };\\n\\n  handleNameValidator = (forms, value, callback) =&gt; {\\n    if (value &amp;&amp; value.length &lt; 3) {\\n      callback('Full name needs to be at least 3 characters long');\\n    }\\n  };\\n}\\n\\nReactDOM.render(&lt;App /&gt;, mountNode);\\n</code></pre>\\n\",\n demos: {\n\n},};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// js/86.8e0ebfe.js","module.exports = {\n markdown: \"<hr>\\n<h2>order: 3\\ntitle:\\nzh-CN: 自定义校验规则\\nen-US: Custom validation rules\\nsubtitle:\\nzh-CN: 自定义校验规则\\nen-US: Custom validation rules.</h2>\\n<pre><code class=\\\"language-js\\\">import {\\n  Form,\\n  Input,\\n  Button,\\n  Select,\\n  Calendar,\\n  Switch,\\n  Checkbox,\\n  Radio,\\n  Message,\\n} from 'dashkit-ui';\\n\\nclass App extends React.Component {\\n  render() {\\n    return (\\n      &lt;Form onSubmit={this.handleSubmit} labelWidth={150}&gt;\\n        &lt;Form.Item\\n          label=&quot;Full Name&quot;\\n          name=&quot;name&quot;\\n          required\\n          rule={{\\n            message: 'Please input your name',\\n            trigger: [`blur`, `change`],\\n            validator: this.handleNameValidator,\\n          }}\\n        &gt;\\n          &lt;Input placeholder=&quot;Full name&quot; /&gt;\\n        &lt;/Form.Item&gt;\\n        &lt;Form.Item\\n          label=&quot;Email&quot;\\n          name=&quot;email&quot;\\n          required\\n          rule={{\\n            message: 'Please input your email',\\n            validator: this.handleEmailValidator,\\n          }}\\n        &gt;\\n          &lt;Input placeholder=&quot;Email&quot; /&gt;\\n        &lt;/Form.Item&gt;\\n        &lt;Form.Item\\n          label=&quot;Confirm Email&quot;\\n          name=&quot;confirmEmail&quot;\\n          required\\n          rule={{\\n            message: 'Please input your email',\\n            trigger: [`focus`, `change`],\\n            validator: this.handleConfirmValidator,\\n          }}\\n        &gt;\\n          &lt;Input placeholder=&quot;Confirm email&quot; /&gt;\\n        &lt;/Form.Item&gt;\\n        &lt;Form.Item&gt;\\n          &lt;Button type=&quot;primary&quot; htmlType=&quot;submit&quot;&gt;\\n            Submit\\n          &lt;/Button&gt;\\n          &lt;Button style={{ marginLeft: 10 }} htmlType=&quot;reset&quot;&gt;\\n            Reset\\n          &lt;/Button&gt;\\n        &lt;/Form.Item&gt;\\n      &lt;/Form&gt;\\n    );\\n  }\\n\\n  handleSubmit = (event, values, errors, forms) =&gt; {\\n    event.preventDefault();\\n\\n    if (!errors) {\\n      console.log(values);\\n      setTimeout(() =&gt; {\\n        Message.success('Success');\\n        forms.reset();\\n      }, 2000);\\n    }\\n  };\\n\\n  handleEmailValidator = (forms, value, callback) =&gt; {\\n    const reg = /^[a-z0-9]+([._\\\\\\\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/;\\n\\n    if (value &amp;&amp; !reg.test(value)) {\\n      callback('Email needs to be in validation email format!');\\n    }\\n  };\\n\\n  handleConfirmValidator = (forms, value, callback) =&gt; {\\n    if (value !== forms.email) {\\n      callback(&quot;Two inputs don't match!&quot;);\\n    }\\n  };\\n\\n  handleNameValidator = (forms, value, callback) =&gt; {\\n    if (value &amp;&amp; value.length &lt; 3) {\\n      callback('Full name needs to be at least 3 characters long');\\n    }\\n  };\\n}\\n\\nReactDOM.render(&lt;App /&gt;, mountNode);\\n</code></pre>\\n\",\n demos: {\n\n},};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./docs/components/form/demo/custom-validation.md\n// module id = xVUl\n// module chunks = 86"],"sourceRoot":""}