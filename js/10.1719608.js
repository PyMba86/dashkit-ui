webpackJsonp([10],{"8cWC":function(t,n,e){t.exports={markdown:'<h1>Button</h1>\n<p>Buttons for actions in forms, dialogs, and more with support for multiple sizes, states, and more.</p>\n<div id="demos"></div>\n<h2>API</h2>\n<div class="api-container">\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>className of the component</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>size</td>\n<td>button size, can be set to <code>small</code> <code>large</code> or omitted</td>\n<td>string</td>\n<td>default</td>\n</tr>\n<tr>\n<td>type</td>\n<td>button type, can be set to <code>primary</code> <code>success</code> <code>warning</code> <code>danger</code> <code>info</code> <code>link</code> or ommited</td>\n<td>string</td>\n<td>default</td>\n</tr>\n<tr>\n<td>outline</td>\n<td>determine whether it\'s a outline button</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>round</td>\n<td>determine whether it\'s a round button</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disable the button</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>determine whether it\'s loading</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>button icon, see <code>Icon</code> component</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div>\n',demos:{basic:e("mBvl"),disabled:e("mcqB"),loading:e("WrCF"),size:e("xMNe")}}},WrCF:function(t,n,e){t.exports={code:'import { Button } from \'dashkit-ui\';\n\nReactDOM.render(\n  <div className="button-wrapper">\n    <div className="button-list">\n      <Button loading size="large">\n        Default\n      </Button>\n      <Button loading>Default</Button>\n      <Button loading size="small">\n        Default\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="primary" size="large" loading>\n        Primary\n      </Button>\n      <Button type="primary" loading>\n        Primary\n      </Button>\n      <Button type="primary" size="small" loading>\n        Primary\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="success" size="large" loading>\n        success\n      </Button>\n      <Button type="success" loading>\n        success\n      </Button>\n      <Button type="success" size="small" loading>\n        success\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="warning" size="large" loading>\n        warning\n      </Button>\n      <Button type="warning" loading>\n        warning\n      </Button>\n      <Button type="warning" size="small" loading>\n        warning\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="danger" size="large" loading>\n        danger\n      </Button>\n      <Button type="danger" loading>\n        danger\n      </Button>\n      <Button type="danger" size="small" loading>\n        danger\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="info" size="large" loading>\n        info\n      </Button>\n      <Button type="info" loading>\n        info\n      </Button>\n      <Button type="info" size="small" loading>\n        info\n      </Button>\n    </div>\n  </div>,\n  mountNode,\n);\n',meta:{order:2,title:{"zh-CN":"加载中","en-US":"Loading"},subtitle:{"zh-CN":"<p>使用<code>loading</code>来决定是否显示加载中的状态，默认值是<code>false</code>。</p>\n","en-US":"<p>Add the <code>loading</code> property to determine if the button is loading.</p>\n"}},preview:function(){var t=e("GiK3"),n=(e("O27J"),e("qMEF"));return t.createElement("div",{className:"button-wrapper"},t.createElement("div",{className:"button-list"},t.createElement(n.Button,{loading:!0,size:"large"},"Default"),t.createElement(n.Button,{loading:!0},"Default"),t.createElement(n.Button,{loading:!0,size:"small"},"Default")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"primary",size:"large",loading:!0},"Primary"),t.createElement(n.Button,{type:"primary",loading:!0},"Primary"),t.createElement(n.Button,{type:"primary",size:"small",loading:!0},"Primary")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"success",size:"large",loading:!0},"success"),t.createElement(n.Button,{type:"success",loading:!0},"success"),t.createElement(n.Button,{type:"success",size:"small",loading:!0},"success")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"warning",size:"large",loading:!0},"warning"),t.createElement(n.Button,{type:"warning",loading:!0},"warning"),t.createElement(n.Button,{type:"warning",size:"small",loading:!0},"warning")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"danger",size:"large",loading:!0},"danger"),t.createElement(n.Button,{type:"danger",loading:!0},"danger"),t.createElement(n.Button,{type:"danger",size:"small",loading:!0},"danger")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"info",size:"large",loading:!0},"info"),t.createElement(n.Button,{type:"info",loading:!0},"info"),t.createElement(n.Button,{type:"info",size:"small",loading:!0},"info")))}}},mBvl:function(t,n,e){t.exports={code:'import { Button } from \'dashkit-ui\';\n\nReactDOM.render(\n  <div className="button-wrapper">\n    <div className="button-list">\n      <Button>Default</Button>\n      <Button type="primary">Primary</Button>\n      <Button type="success">Success</Button>\n      <Button type="warning">Warning</Button>\n      <Button type="danger">Danger</Button>\n      <Button type="info">Info</Button>\n      <Button type="link">Link</Button>\n    </div>\n\n    <div className="button-list">\n      <Button outline>Outline</Button>\n      <Button type="primary" outline>\n        Primary\n      </Button>\n      <Button type="success" outline>\n        Success\n      </Button>\n      <Button type="warning" outline>\n        Warning\n      </Button>\n      <Button type="danger" outline>\n        Danger\n      </Button>\n      <Button type="info" outline>\n        Info\n      </Button>\n    </div>\n\n    <div className="button-list">\n      <Button round>Round</Button>\n      <Button type="primary" round>\n        Primary\n      </Button>\n      <Button type="success" round>\n        Success\n      </Button>\n      <Button type="warning" round>\n        Warning\n      </Button>\n      <Button type="danger" round>\n        Danger\n      </Button>\n      <Button type="info" round>\n        Info\n      </Button>\n    </div>\n\n    <div className="button-list">\n      <Button round icon="search" />\n      <Button round type="primary" icon="download" />\n      <Button round type="success" icon="check-circle" />\n      <Button round type="warning" icon="x-circle" />\n      <Button round type="danger" icon="alert-circle" />\n      <Button round type="info" icon="info" />\n    </div>\n  </div>,\n  mountNode,\n);\n',meta:{order:0,title:{"zh-CN":"基本","en-US":"Basic"},subtitle:{"zh-CN":"<p>基本用法，可以用<code>type</code>、<code>outline</code>、 <code>round</code> 和 <code>circle</code>来定义button的样式。</p>\n","en-US":"<p>Use <code>type</code>, <code>outline</code>, <code>round</code> and <code>circle</code> to define Button's style.</p>\n"}},preview:function(){var t=e("GiK3"),n=(e("O27J"),e("qMEF"));return t.createElement("div",{className:"button-wrapper"},t.createElement("div",{className:"button-list"},t.createElement(n.Button,null,"Default"),t.createElement(n.Button,{type:"primary"},"Primary"),t.createElement(n.Button,{type:"success"},"Success"),t.createElement(n.Button,{type:"warning"},"Warning"),t.createElement(n.Button,{type:"danger"},"Danger"),t.createElement(n.Button,{type:"info"},"Info"),t.createElement(n.Button,{type:"link"},"Link")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{outline:!0},"Outline"),t.createElement(n.Button,{type:"primary",outline:!0},"Primary"),t.createElement(n.Button,{type:"success",outline:!0},"Success"),t.createElement(n.Button,{type:"warning",outline:!0},"Warning"),t.createElement(n.Button,{type:"danger",outline:!0},"Danger"),t.createElement(n.Button,{type:"info",outline:!0},"Info")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{round:!0},"Round"),t.createElement(n.Button,{type:"primary",round:!0},"Primary"),t.createElement(n.Button,{type:"success",round:!0},"Success"),t.createElement(n.Button,{type:"warning",round:!0},"Warning"),t.createElement(n.Button,{type:"danger",round:!0},"Danger"),t.createElement(n.Button,{type:"info",round:!0},"Info")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{round:!0,icon:"search"}),t.createElement(n.Button,{round:!0,type:"primary",icon:"download"}),t.createElement(n.Button,{round:!0,type:"success",icon:"check-circle"}),t.createElement(n.Button,{round:!0,type:"warning",icon:"x-circle"}),t.createElement(n.Button,{round:!0,type:"danger",icon:"alert-circle"}),t.createElement(n.Button,{round:!0,type:"info",icon:"info"})))}}},mcqB:function(t,n,e){t.exports={code:'import { Button } from \'dashkit-ui\';\n\nReactDOM.render(\n  <div className="button-wrapper">\n    <div className="button-list">\n      <Button>Default</Button>\n      <Button disabled={true}>Default Disabled</Button>\n    </div>\n    <div className="button-list">\n      <Button type="primary">Primary</Button>\n      <Button type="primary" disabled>\n        Default Disabled\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="success">Success</Button>\n      <Button type="success" disabled>\n        Success Disabled\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="warning">Warning</Button>\n      <Button type="warning" disabled>\n        Warning Disabled\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="danger">Danger</Button>\n      <Button type="danger" disabled>\n        Danger Disabled\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="info">Info</Button>\n      <Button type="info" disabled>\n        Info Disabled\n      </Button>\n    </div>\n    <div className="button-list">\n      <Button type="link">Link</Button>\n      <Button type="link" disabled>\n        Link Disabled\n      </Button>\n    </div>\n  </div>,\n  mountNode,\n);\n',meta:{order:3,title:{"zh-CN":"禁用","en-US":"Disabled"},subtitle:{"zh-CN":"<p>使用<code>disabled</code>来决定是否禁用按钮，默认值是<code>false</code>。</p>\n","en-US":"<p>Add the <code>disabled</code> property to determine if the button is disabled.</p>\n"}},preview:function(){var t=e("GiK3"),n=(e("O27J"),e("qMEF"));return t.createElement("div",{className:"button-wrapper"},t.createElement("div",{className:"button-list"},t.createElement(n.Button,null,"Default"),t.createElement(n.Button,{disabled:!0},"Default Disabled")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"primary"},"Primary"),t.createElement(n.Button,{type:"primary",disabled:!0},"Default Disabled")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"success"},"Success"),t.createElement(n.Button,{type:"success",disabled:!0},"Success Disabled")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"warning"},"Warning"),t.createElement(n.Button,{type:"warning",disabled:!0},"Warning Disabled")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"danger"},"Danger"),t.createElement(n.Button,{type:"danger",disabled:!0},"Danger Disabled")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"info"},"Info"),t.createElement(n.Button,{type:"info",disabled:!0},"Info Disabled")),t.createElement("div",{className:"button-list"},t.createElement(n.Button,{type:"link"},"Link"),t.createElement(n.Button,{type:"link",disabled:!0},"Link Disabled")))}}},xMNe:function(t,n,e){t.exports={code:'import { Button } from \'dashkit-ui\';\n\nReactDOM.render(\n  <div className="button-list">\n    <Button size="large">Large</Button>\n    <Button size="default">Default</Button>\n    <Button size="small">Small</Button>\n    <Button type="primary" size="large" round icon="search">\n      Large\n    </Button>\n    <Button type="primary" size="default" round icon="search">\n      Default\n    </Button>\n    <Button type="primary" size="small" round icon="search">\n      Small\n    </Button>\n  </div>,\n  mountNode,\n);\n',meta:{order:1,title:{"zh-CN":"尺寸","en-US":"Sizes"},subtitle:{"zh-CN":"<p>可以设置<code>size</code>属性来定义尺寸，属性值包括<code>large</code>、<code>default</code>、<code>small</code>，默认是<code>default</code>。</p>\n","en-US":"<p>If a large or small button is desired, set the size property to either <code>large</code> or <code>small</code> respectively. Omit the <code>size</code> property for a button with the default size.</p>\n"}},preview:function(){var t=e("GiK3"),n=(e("O27J"),e("qMEF"));return t.createElement("div",{className:"button-list"},t.createElement(n.Button,{size:"large"},"Large"),t.createElement(n.Button,{size:"default"},"Default"),t.createElement(n.Button,{size:"small"},"Small"),t.createElement(n.Button,{type:"primary",size:"large",round:!0,icon:"search"},"Large"),t.createElement(n.Button,{type:"primary",size:"default",round:!0,icon:"search"},"Default"),t.createElement(n.Button,{type:"primary",size:"small",round:!0,icon:"search"},"Small"))}}}});
//# sourceMappingURL=10.1719608.js.map