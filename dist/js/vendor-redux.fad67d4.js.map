{"version":3,"sources":["webpack:///js/vendor-redux.fad67d4.js","webpack:///./node_modules/redux-promise-middleware/dist/es/isPromise.js","webpack:///./node_modules/redux-promise-middleware/dist/es/index.js","webpack:///./node_modules/redux-thunk/es/index.js"],"names":["webpackJsonp","1","module","exports","__webpack_require__","8x3u","__webpack_exports__","isPromise","value","_typeof","then","Symbol","iterator","obj","constructor","prototype","S2k5","promiseMiddleware","config","arguments","length","undefined","PROMISE_TYPE_SUFFIXES","promiseTypeSuffixes","defaultTypes","PROMISE_TYPE_DELIMITER","promiseTypeDelimiter","ref","dispatch","next","action","promise","data","payload","PAYLOAD","Object","__WEBPACK_IMPORTED_MODULE_0__isPromise_js__","_extends","TYPE","type","META","meta","_PROMISE_TYPE_SUFFIXE","_slicedToArray","_PENDING","_FULFILLED","_REJECTED","getAction","newPayload","isRejected","join","error","handleReject","reason","rejectedAction","handleFulfill","resolvedAction","defineProperty","d","PENDING","FULFILLED","REJECTED","sliceIterator","arr","i","_arr","_n","_d","_e","_s","_i","done","push","err","Array","isArray","TypeError","assign","target","source","key","hasOwnProperty","call","bEzl","createThunkMiddleware","extraArgument","_ref","getState","thunk","withExtraArgument"],"mappings":"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","file":"js/vendor-redux.fad67d4.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 1:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"Ol7m\");\n__webpack_require__(\"S2k5\");\nmodule.exports = __webpack_require__(\"bEzl\");\n\n\n/***/ }),\n\n/***/ \"8x3u\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = isPromise;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction isPromise(value) {\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n    return value && typeof value.then === 'function';\n  }\n\n  return false;\n}\n\n/***/ }),\n\n/***/ \"S2k5\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PENDING\", function() { return PENDING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FULFILLED\", function() { return FULFILLED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REJECTED\", function() { return REJECTED; });\n/* harmony export (immutable) */ __webpack_exports__[\"default\"] = promiseMiddleware;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isPromise_js__ = __webpack_require__(\"8x3u\");\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n/**\n * Note to contributors: Please also remember to check and make sure\n * that `index.d.ts` is also up to date with the implementation when\n * you add new features or modify existing ones.\n */\n\n// The default async action types\nvar PENDING = 'PENDING';\nvar FULFILLED = 'FULFILLED';\nvar REJECTED = 'REJECTED';\nvar defaultTypes = [PENDING, FULFILLED, REJECTED];\n\n/**\n * Function: promiseMiddleware\n * Description: The main promiseMiddleware accepts a configuration\n * object and returns the middleware.\n */\nfunction promiseMiddleware() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var PROMISE_TYPE_SUFFIXES = config.promiseTypeSuffixes || defaultTypes;\n  var PROMISE_TYPE_DELIMITER = config.promiseTypeDelimiter || '_';\n\n  return function (ref) {\n    var dispatch = ref.dispatch;\n\n\n    return function (next) {\n      return function (action) {\n\n        /**\n         * Instantiate variables to hold:\n         * (1) the promise\n         * (2) the data for optimistic updates\n         */\n        var promise = void 0;\n        var data = void 0;\n\n        /**\n         * There are multiple ways to dispatch a promise. The first step is to\n         * determine if the promise is defined:\n         * (a) explicitly (action.payload.promise is the promise)\n         * (b) implicitly (action.payload is the promise)\n         * (c) as an async function (returns a promise when called)\n         *\n         * If the promise is not defined in one of these three ways, we don't do\n         * anything and move on to the next middleware in the middleware chain.\n         */\n\n        // Step 1a: Is there a payload?\n        if (action.payload) {\n          var PAYLOAD = action.payload;\n\n          // Step 1.1: Is the promise implicitly defined?\n          if (Object(__WEBPACK_IMPORTED_MODULE_0__isPromise_js__[\"a\" /* default */])(PAYLOAD)) {\n            promise = PAYLOAD;\n          }\n\n          // Step 1.2: Is the promise explicitly defined?\n          else if (Object(__WEBPACK_IMPORTED_MODULE_0__isPromise_js__[\"a\" /* default */])(PAYLOAD.promise)) {\n              promise = PAYLOAD.promise;\n              data = PAYLOAD.data;\n            }\n\n            // Step 1.3: Is the promise returned by an async function?\n            else if (typeof PAYLOAD === 'function' || typeof PAYLOAD.promise === 'function') {\n                promise = PAYLOAD.promise ? PAYLOAD.promise() : PAYLOAD();\n                data = PAYLOAD.promise ? PAYLOAD.data : undefined;\n\n                // Step 1.3.1: Is the return of action.payload a promise?\n                if (!Object(__WEBPACK_IMPORTED_MODULE_0__isPromise_js__[\"a\" /* default */])(promise)) {\n\n                  // If not, move on to the next middleware.\n                  return next(_extends({}, action, {\n                    payload: promise\n                  }));\n                }\n              }\n\n              // Step 1.4: If there's no promise, move on to the next middleware.\n              else {\n                  return next(action);\n                }\n\n          // Step 1b: If there's no payload, move on to the next middleware.\n        } else {\n          return next(action);\n        }\n\n        /**\n         * Instantiate and define constants for:\n         * (1) the action type\n         * (2) the action meta\n         */\n        var TYPE = action.type;\n        var META = action.meta;\n\n        /**\n         * Instantiate and define constants for the action type suffixes.\n         * These are appended to the end of the action type.\n         */\n\n        var _PROMISE_TYPE_SUFFIXE = _slicedToArray(PROMISE_TYPE_SUFFIXES, 3),\n            _PENDING = _PROMISE_TYPE_SUFFIXE[0],\n            _FULFILLED = _PROMISE_TYPE_SUFFIXE[1],\n            _REJECTED = _PROMISE_TYPE_SUFFIXE[2];\n\n        /**\n         * Function: getAction\n         * Description: This function constructs and returns a rejected\n         * or fulfilled action object. The action object is based off the Flux\n         * Standard Action (FSA).\n         *\n         * Given an original action with the type FOO:\n         *\n         * The rejected object model will be:\n         * {\n         *   error: true,\n         *   type: 'FOO_REJECTED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         *\n         * The fulfilled object model will be:\n         * {\n         *   type: 'FOO_FULFILLED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         */\n\n\n        var getAction = function getAction(newPayload, isRejected) {\n          return _extends({\n            // Concatentate the type string property.\n            type: [TYPE, isRejected ? _REJECTED : _FULFILLED].join(PROMISE_TYPE_DELIMITER)\n\n          }, newPayload === null || typeof newPayload === 'undefined' ? {} : {\n            payload: newPayload\n          }, META !== undefined ? { meta: META } : {}, isRejected ? {\n            error: true\n          } : {});\n        };\n\n        /**\n         * Function: handleReject\n         * Calls: getAction to construct the rejected action\n         * Description: This function dispatches the rejected action and returns\n         * the original Error object. Please note the developer is responsible\n         * for constructing and throwing an Error object. The middleware does not\n         * construct any Errors.\n         */\n        var handleReject = function handleReject(reason) {\n          var rejectedAction = getAction(reason, true);\n          dispatch(rejectedAction);\n\n          throw reason;\n        };\n\n        /**\n         * Function: handleFulfill\n         * Calls: getAction to construct the fullfilled action\n         * Description: This function dispatches the fulfilled action and\n         * returns the success object. The success object should\n         * contain the value and the dispatched action.\n         */\n        var handleFulfill = function handleFulfill() {\n          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n          var resolvedAction = getAction(value, false);\n          dispatch(resolvedAction);\n\n          return { value: value, action: resolvedAction };\n        };\n\n        /**\n         * First, dispatch the pending action:\n         * This object describes the pending state of a promise and will include\n         * any data (for optimistic updates) and/or meta from the original action.\n         */\n        next(_extends({\n          // Concatentate the type string.\n          type: [TYPE, _PENDING].join(PROMISE_TYPE_DELIMITER)\n\n        }, data !== undefined ? { payload: data } : {}, META !== undefined ? { meta: META } : {}));\n\n        /**\n         * Second, dispatch a rejected or fulfilled action and move on to the\n         * next middleware.\n         */\n        return promise.then(handleFulfill, handleReject);\n      };\n    };\n  };\n}\n\n/***/ }),\n\n/***/ \"bEzl\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\nfunction createThunkMiddleware(extraArgument) {\n  return function (_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        if (typeof action === 'function') {\n          return action(dispatch, getState, extraArgument);\n        }\n\n        return next(action);\n      };\n    };\n  };\n}\n\nvar thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (thunk);\n\n/***/ })\n\n},[1]);\n\n\n// WEBPACK FOOTER //\n// js/vendor-redux.fad67d4.js","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexport default function isPromise(value) {\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n    return value && typeof value.then === 'function';\n  }\n\n  return false;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/redux-promise-middleware/dist/es/isPromise.js\n// module id = 8x3u\n// module chunks = 4","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport isPromise from './isPromise.js';\n\n/**\n * Note to contributors: Please also remember to check and make sure\n * that `index.d.ts` is also up to date with the implementation when\n * you add new features or modify existing ones.\n */\n\n// The default async action types\nexport var PENDING = 'PENDING';\nexport var FULFILLED = 'FULFILLED';\nexport var REJECTED = 'REJECTED';\nvar defaultTypes = [PENDING, FULFILLED, REJECTED];\n\n/**\n * Function: promiseMiddleware\n * Description: The main promiseMiddleware accepts a configuration\n * object and returns the middleware.\n */\nexport default function promiseMiddleware() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var PROMISE_TYPE_SUFFIXES = config.promiseTypeSuffixes || defaultTypes;\n  var PROMISE_TYPE_DELIMITER = config.promiseTypeDelimiter || '_';\n\n  return function (ref) {\n    var dispatch = ref.dispatch;\n\n\n    return function (next) {\n      return function (action) {\n\n        /**\n         * Instantiate variables to hold:\n         * (1) the promise\n         * (2) the data for optimistic updates\n         */\n        var promise = void 0;\n        var data = void 0;\n\n        /**\n         * There are multiple ways to dispatch a promise. The first step is to\n         * determine if the promise is defined:\n         * (a) explicitly (action.payload.promise is the promise)\n         * (b) implicitly (action.payload is the promise)\n         * (c) as an async function (returns a promise when called)\n         *\n         * If the promise is not defined in one of these three ways, we don't do\n         * anything and move on to the next middleware in the middleware chain.\n         */\n\n        // Step 1a: Is there a payload?\n        if (action.payload) {\n          var PAYLOAD = action.payload;\n\n          // Step 1.1: Is the promise implicitly defined?\n          if (isPromise(PAYLOAD)) {\n            promise = PAYLOAD;\n          }\n\n          // Step 1.2: Is the promise explicitly defined?\n          else if (isPromise(PAYLOAD.promise)) {\n              promise = PAYLOAD.promise;\n              data = PAYLOAD.data;\n            }\n\n            // Step 1.3: Is the promise returned by an async function?\n            else if (typeof PAYLOAD === 'function' || typeof PAYLOAD.promise === 'function') {\n                promise = PAYLOAD.promise ? PAYLOAD.promise() : PAYLOAD();\n                data = PAYLOAD.promise ? PAYLOAD.data : undefined;\n\n                // Step 1.3.1: Is the return of action.payload a promise?\n                if (!isPromise(promise)) {\n\n                  // If not, move on to the next middleware.\n                  return next(_extends({}, action, {\n                    payload: promise\n                  }));\n                }\n              }\n\n              // Step 1.4: If there's no promise, move on to the next middleware.\n              else {\n                  return next(action);\n                }\n\n          // Step 1b: If there's no payload, move on to the next middleware.\n        } else {\n          return next(action);\n        }\n\n        /**\n         * Instantiate and define constants for:\n         * (1) the action type\n         * (2) the action meta\n         */\n        var TYPE = action.type;\n        var META = action.meta;\n\n        /**\n         * Instantiate and define constants for the action type suffixes.\n         * These are appended to the end of the action type.\n         */\n\n        var _PROMISE_TYPE_SUFFIXE = _slicedToArray(PROMISE_TYPE_SUFFIXES, 3),\n            _PENDING = _PROMISE_TYPE_SUFFIXE[0],\n            _FULFILLED = _PROMISE_TYPE_SUFFIXE[1],\n            _REJECTED = _PROMISE_TYPE_SUFFIXE[2];\n\n        /**\n         * Function: getAction\n         * Description: This function constructs and returns a rejected\n         * or fulfilled action object. The action object is based off the Flux\n         * Standard Action (FSA).\n         *\n         * Given an original action with the type FOO:\n         *\n         * The rejected object model will be:\n         * {\n         *   error: true,\n         *   type: 'FOO_REJECTED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         *\n         * The fulfilled object model will be:\n         * {\n         *   type: 'FOO_FULFILLED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         */\n\n\n        var getAction = function getAction(newPayload, isRejected) {\n          return _extends({\n            // Concatentate the type string property.\n            type: [TYPE, isRejected ? _REJECTED : _FULFILLED].join(PROMISE_TYPE_DELIMITER)\n\n          }, newPayload === null || typeof newPayload === 'undefined' ? {} : {\n            payload: newPayload\n          }, META !== undefined ? { meta: META } : {}, isRejected ? {\n            error: true\n          } : {});\n        };\n\n        /**\n         * Function: handleReject\n         * Calls: getAction to construct the rejected action\n         * Description: This function dispatches the rejected action and returns\n         * the original Error object. Please note the developer is responsible\n         * for constructing and throwing an Error object. The middleware does not\n         * construct any Errors.\n         */\n        var handleReject = function handleReject(reason) {\n          var rejectedAction = getAction(reason, true);\n          dispatch(rejectedAction);\n\n          throw reason;\n        };\n\n        /**\n         * Function: handleFulfill\n         * Calls: getAction to construct the fullfilled action\n         * Description: This function dispatches the fulfilled action and\n         * returns the success object. The success object should\n         * contain the value and the dispatched action.\n         */\n        var handleFulfill = function handleFulfill() {\n          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n          var resolvedAction = getAction(value, false);\n          dispatch(resolvedAction);\n\n          return { value: value, action: resolvedAction };\n        };\n\n        /**\n         * First, dispatch the pending action:\n         * This object describes the pending state of a promise and will include\n         * any data (for optimistic updates) and/or meta from the original action.\n         */\n        next(_extends({\n          // Concatentate the type string.\n          type: [TYPE, _PENDING].join(PROMISE_TYPE_DELIMITER)\n\n        }, data !== undefined ? { payload: data } : {}, META !== undefined ? { meta: META } : {}));\n\n        /**\n         * Second, dispatch a rejected or fulfilled action and move on to the\n         * next middleware.\n         */\n        return promise.then(handleFulfill, handleReject);\n      };\n    };\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/redux-promise-middleware/dist/es/index.js\n// module id = S2k5\n// module chunks = 4","function createThunkMiddleware(extraArgument) {\n  return function (_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        if (typeof action === 'function') {\n          return action(dispatch, getState, extraArgument);\n        }\n\n        return next(action);\n      };\n    };\n  };\n}\n\nvar thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\nexport default thunk;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/redux-thunk/es/index.js\n// module id = bEzl\n// module chunks = 4"],"sourceRoot":""}